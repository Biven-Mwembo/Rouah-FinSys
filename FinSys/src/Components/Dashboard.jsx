import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Plot from "react-plotly.js";

const API_BASE_URL = "https://finsys.onrender.com/api";

// --- START: Internal Components (Unchanged) ---

const SuccessToast = ({ message }) => {
Â  return (
Â  Â  <div
Â  Â  Â  className="success-toast"
Â  Â  Â  style={{
Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  bottom: "20px",
Â  Â  Â  Â  left: "50%",
Â  Â  Â  Â  transform: "translateX(-50%)",
Â  Â  Â  Â  backgroundColor: "#10b981", // Emerald green
Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  padding: "15px 30px",
Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
Â  Â  Â  Â  zIndex: 10001,
Â  Â  Â  Â  animation: "slideInUp 0.3s ease-out, fadeOut 0.5s ease-in 4.5s forwards",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <span>{message}</span>
Â  Â  Â  <style>{`
Â  Â  Â  Â  @keyframes slideInUp {
Â  Â  Â  Â  Â  from {
Â  Â  Â  Â  Â  Â  transform: translate(-50%, 100%);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  to {
Â  Â  Â  Â  Â  Â  transform: translate(-50%, 0);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  @keyframes fadeOut {
Â  Â  Â  Â  Â  to {
Â  Â  Â  Â  Â  Â  opacity: 0;
Â  Â  Â  Â  Â  Â  visibility: hidden;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  `}</style>
Â  Â  </div>
Â  );
};


const ConfirmationModal = ({ isOpen, message, onConfirm, onCancel }) => {
Â  if (!isOpen) return null;

Â  return (
Â  Â  <div
Â  Â  Â  className="confirmation-modal-overlay"
Â  Â  Â  onClick={onCancel}
Â  Â  Â  style={{
Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  top: 0,
Â  Â  Â  Â  left: 0,
Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  height: "100%",
Â  Â  Â  Â  backgroundColor: "rgba(0,0,0,0.6)",
Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  justifyContent: "center",
Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  zIndex: 10000,
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <div
Â  Â  Â  Â  className="confirmation-modal-content"
Â  Â  Â  Â  onClick={(e) => e.stopPropagation()}
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  borderRadius: "12px",
Â  Â  Â  Â  Â  padding: "25px 30px",
Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  maxWidth: "400px",
Â  Â  Â  Â  Â  boxShadow: "0 8px 30px rgba(0,0,0,0.25)",
Â  Â  Â  Â  Â  textAlign: "center",
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <h3 style={{ fontSize: "1.2rem", color: "#111827", marginBottom: "15px" }}>
Â  Â  Â  Â  Â  Confirm Transaction
Â  Â  Â  Â  </h3>
Â  Â  Â  Â  <p style={{ marginBottom: "25px", color: "#4b5563" }}>
Â  Â  Â  Â  Â  {message}
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <div style={{ display: "flex", justifyContent: "center", gap: "15px" }}>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onCancel}
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  padding: "10px 20px",
Â  Â  Â  Â  Â  Â  Â  border: "1px solid #d1d5db",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  transition: "all 0.2s",
Â  Â  Â  Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = "#f3f4f6")}
Â  Â  Â  Â  Â  Â  onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = "#fff")}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onConfirm}
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  padding: "10px 20px",
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#10b981",
Â  Â  Â  Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  transition: "all 0.2s",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = "#059669")}
Â  Â  Â  Â  Â  Â  onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = "#10b981")}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Confirm Add
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};


const MessageBox = ({ message, onClose }) => (
Â  <div
Â  Â  className="message-box"
Â  Â  style={{
Â  Â  Â  position: "fixed",
Â  Â  Â  top: "20px",
Â  Â  Â  right: "20px",
Â  Â  Â  backgroundColor: "#fee2e2",
Â  Â  Â  color: "#b91c1c",
Â  Â  Â  padding: "12px 20px",
Â  Â  Â  borderRadius: "10px",
Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.1)",
Â  Â  Â  zIndex: 9999,
Â  Â  Â  display: "flex",
Â  Â  Â  justifyContent: "space-between",
Â  Â  Â  alignItems: "center",
Â  Â  Â  minWidth: "250px",
Â  Â  }}
Â  >
Â  Â  <span>{message}</span>
Â  Â  <button
Â  Â  Â  onClick={onClose}
Â  Â  Â  style={{
Â  Â  Â  Â  marginLeft: "15px",
Â  Â  Â  Â  background: "none",
Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  fontSize: "1.2rem",
Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  color: "#b91c1c",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  &times;
Â  Â  </button>
Â  </div>
);

const Card = ({ title, balance, fcBalance, color }) => (
Â  <div
Â  Â  className={`card ${color}`}
Â  Â  style={{
Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  padding: "20px",
Â  Â  Â  borderRadius: "16px",
Â  Â  Â  flex: 1,
Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  Â  display: "flex",
Â  Â  Â  flexDirection: "column",
Â  Â  Â  gap: "10px",
Â  Â  Â  minWidth: "200px",
Â  Â  Â 
Â  Â  }}
Â  >
Â  Â  <h3 style={{ color: "#374151", fontWeight: 600 }}>{title}</h3>
Â  Â  <p className="balance" style={{ fontSize: "1.25rem", fontWeight: 600 }}>
Â  Â  Â  {balance}
Â  Â  </p>
Â  Â  <p className="fc-balance" style={{ color: "#6b7280" }}>
Â  Â  Â  {fcBalance}
Â  Â  </p>
Â  </div>
);

const Navbar = () => {
Â  const navigate = useNavigate();
Â  const [userEmail, setUserEmail] = useState("User");

Â  useEffect(() => {
Â  Â  try {
Â  Â  Â  const userString = localStorage.getItem("user");
Â  Â  Â  if (userString) {
Â  Â  Â  Â  const user = JSON.parse(userString);
Â  Â  Â  Â  setUserEmail(user.email || "User");
Â  Â  Â  }
Â  Â  } catch (e) {
Â  Â  Â  console.error("Failed to parse user data for navbar.", e);
Â  Â  }
Â  }, []);

Â  const handleLogout = () => {
Â  Â  localStorage.clear();
Â  Â  window.location.href = "/login";
Â  };

Â  return (
Â  Â <nav
Â  style={{
Â  Â  position: "relative",
Â  Â  top: "0",
Â  Â  right: "0",
Â  Â  display: "flex",
Â  Â  alignItems: "center",
Â  Â  justifyContent: "flex-end",
Â  Â  padding: "0.75rem 1rem",
Â  Â  backgroundColor: "#f5f5f7",
Â  Â  color: "#0f0f0fff",
Â  Â  boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
Â  Â  borderBottomLeftRadius: "0.75rem",
Â  Â  zIndex: 1000,
Â  }}
>
Â  <div style={{ display: "flex", alignItems: "center", gap: "1rem" }}>
Â  Â  <span
Â  Â  Â  style={{
Â  Â  Â  Â  fontSize: "0.875rem",
Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  color: "#141414ff",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <strong>{userEmail}</strong>
Â  Â  Â  </span>

Â  Â  {/* Profile Circle */}
Â  Â  <div
Â  Â  Â  style={{
Â  Â  Â  Â  width: "40px",
Â  Â  Â  Â  height: "40px",
Â  Â  Â  Â  borderRadius: "50%",
Â  Â  Â  Â  backgroundColor: "#3b82f6",
Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  justifyContent: "center",
Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  fontSize: "1rem",
Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  }}
Â  Â  Â  title="Profile"
Â  Â  Â Â 
Â  Â  >
Â  Â  Â  {userEmail?.charAt(0).toUpperCase() || "U"}
Â  Â  </div>
Â  </div>
</nav>


Â  );
};
// --- END: Internal Components (Unchanged) ---


export default function Dashboard() {
Â  const navigate = useNavigate();

Â  const [tableData, setTableData] = useState([]);
Â  const [showModal, setShowModal] = useState(false);
Â  const [showConfirmModal, setShowConfirm] = useState(false);
Â  const [showSuccessBanner, setShowSuccessBanner] = useState(false);
Â  const [errorMessage, setErrorMessage] = useState(null);
Â  const [loading, setLoading] = useState(true);

Â  const [currentUserId, setCurrentUserId] = useState(null);
Â  // ðŸ‘‡ NEW STATE: 
Â  const [successMessage, setSuccessMessage] = useState("");

Â  // NEW STATE: For the transaction details being confirmed
Â  const [newTransaction, setNewTransaction] = useState({
Â  Â  date: new Date().toISOString().slice(0, 10), // Today's date
Â  Â  amount: "",
Â  Â  currency: "USD",
Â  Â  channel: "Sorties", // Default to Sorties for safety/convenience
Â  Â  motif: "",
Â  Â  file: null, // File object
Â  });

Â  useEffect(() => {
Â  Â  try {
Â  Â  Â  const userString = localStorage.getItem("user");
Â  Â  Â  if (userString) {
Â  Â  Â  Â  const user = JSON.parse(userString);
Â  Â  Â  Â  setCurrentUserId(user.id);
Â  Â  Â  Â  // Optionally fetch data here if needed, but not strictly required for the `Post` logic
Â  Â  Â  } else {
Â  Â  Â  Â  navigate("/login");
Â  Â  Â  }
Â  Â  } catch (e) {
Â  Â  Â  console.error("Error parsing user data:", e);
Â  Â  Â  navigate("/login");
Â  Â  }
Â  }, [navigate]);

Â  const handleInputChange = (e) => {
Â  Â  const { name, value } = e.target;
Â  Â  setNewTransaction((prev) => ({ ...prev, [name]: value }));
Â  };

Â  const handleFileChange = (e) => {
Â  Â  setNewTransaction((prev) => ({ ...prev, file: e.target.files[0] }));
Â  };

Â  const handleShowConfirm = (e) => {
Â  Â  e.preventDefault();
Â  Â  // Basic validation before showing confirm modal
Â  Â  if (!newTransaction.date || !newTransaction.amount || !newTransaction.currency || !newTransaction.channel || !newTransaction.motif) {
Â  Â  Â  setErrorMessage("Please fill out all required fields.");
Â  Â  Â  return;
Â  Â  }
Â  Â  setShowConfirm(true);
Â  };

Â  // ðŸ”‘ UPDATED FUNCTION TO HANDLE 202 STATUS FOR 'SORTIES'
Â  const handleAddTransaction = async () => {
Â  Â  setShowConfirm(false);
Â  Â  setErrorMessage(null);
Â  Â  setLoading(true);

Â  Â  const formData = new FormData();
Â  Â  formData.append("Date", newTransaction.date);
Â  Â  formData.append("Amount", newTransaction.amount);
Â  Â  formData.append("Currency", newTransaction.currency);
Â  Â  formData.append("Channel", newTransaction.channel);
Â  Â  formData.append("Motif", newTransaction.motif);

Â  Â  if (newTransaction.file) {
Â  Â  Â  formData.append("File", newTransaction.file);
Â  Â  }

Â  Â  try {
Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  const response = await axios.post(
Â  Â  Â  Â  `${API_BASE_URL}/transactions`,
Â  Â  Â  Â  formData,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  "Content-Type": "multipart/form-data",
Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${token}`,
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  }
Â  Â  Â  );

Â  Â  Â  // ðŸ›‘ CORE LOGIC CHANGE FOR SORTIES APPROVAL
Â  Â  Â  if (response.status === 202 && newTransaction.channel.toLowerCase() === "sorties") {
Â  Â  Â  Â  setSuccessMessage(
Â  Â  Â  Â  Â  "Sortie request sent successfully! Awaiting Admin approval. It will appear once approved."
Â  Â  Â  Â  );
Â  Â  Â  } else {
Â  Â  Â  Â  setSuccessMessage("Transaction added successfully!");
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  setShowSuccessBanner(true);
Â  Â  Â  setShowModal(false);
Â  Â  Â  
Â  Â  Â  // Reset the form data after successful submission
Â  Â  Â  setNewTransaction({
Â  Â  Â  Â  date: new Date().toISOString().slice(0, 10),
Â  Â  Â  Â  amount: "",
Â  Â  Â  Â  currency: "USD",
Â  Â  Â  Â  channel: "Sorties",
Â  Â  Â  Â  motif: "",
Â  Â  Â  Â  file: null,
Â  Â  Â  });

Â  Â  } catch (error) {
Â  Â  Â  console.error("Error creating transaction:", error);
Â  Â  Â  const msg =
Â  Â  Â  Â  error.response?.data?.Message ||
Â  Â  Â  Â  "An error occurred while adding the transaction.";
Â  Â  Â  setErrorMessage(msg);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  Â  // Hide success message after 5 seconds
Â  Â  Â  setTimeout(() => setShowSuccessBanner(false), 5000);
Â  Â  }
Â  };


Â  // --- MOCK DATA (to be replaced by actual data fetching) ---
Â  const mockData = {
Â  Â  totalBalance: "12,500.00 MAD",
Â  Â  fcBalance: "1,200.00 FC",
Â  Â  totalIncome: "15,000.00 MAD",
Â  Â  totalExpenses: "2,500.00 MAD",
Â  Â  chartLayout: {
Â  Â  Â  title: "Monthly Cash Flow",
Â  Â  Â  xaxis: { title: "Month" },
Â  Â  Â  yaxis: { title: "Amount (MAD)" },
Â  Â  Â  margin: { t: 40, b: 40, l: 40, r: 40 },
Â  Â  },
Â  Â  chartData: [
Â  Â  Â  {
Â  Â  Â  Â  x: ["Jan", "Feb", "Mar", "Apr", "May"],
Â  Â  Â  Â  y: [5000, 6000, 4500, 7000, 8000],
Â  Â  Â  Â  name: "Income",
Â  Â  Â  Â  type: "bar",
Â  Â  Â  Â  marker: { color: "#10b981" },
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  x: ["Jan", "Feb", "Mar", "Apr", "May"],
Â  Â  Â  Â  y: [1000, 1500, 1200, 2000, 1800],
Â  Â  Â  Â  name: "Expenses",
Â  Â  Â  Â  type: "bar",
Â  Â  Â  Â  marker: { color: "#ef4444" },
Â  Â  Â  },
Â  Â  ],
Â  Â  mockTransactions: [
Â  Â  Â  {
Â  Â  Â  Â  id: 1,
Â  Â  Â  Â  date: "2024-05-01",
Â  Â  Â  Â  amount: "1000.00",
Â  Â  Â  Â  currency: "MAD",
Â  Â  Â  Â  channel: "Sorties",
Â  Â  Â  Â  motif: "Rent Payment",
Â  Â  Â  Â  status: "Approved"
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  id: 2,
Â  Â  Â  Â  date: "2024-05-05",
Â  Â  Â  Â  amount: "500.00",
Â  Â  Â  Â  currency: "USD",
Â  Â  Â  Â  channel: "EntrÃ©es",
Â  Â  Â  Â  motif: "Offering",
Â  Â  Â  Â  status: "Approved"
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  id: 3,
Â  Â  Â  Â  date: "2024-05-10",
Â  Â  Â  Â  amount: "200.00",
Â  Â  Â  Â  currency: "MAD",
Â  Â  Â  Â  channel: "Sorties",
Â  Â  Â  Â  motif: "Office Supplies",
Â  Â  Â  Â  status: "Pending" // Mock pending status for illustration
Â  Â  Â  },
Â  Â  ],
Â  };
Â  // --- END MOCK DATA ---


Â  return (
Â  Â  <div
Â  Â  Â  className="dashboard-container"
Â  Â  Â  style={{
Â  Â  Â  Â  minHeight: "100vh",
Â  Â  Â  Â  backgroundColor: "#f9fafb",
Â  Â  Â  Â  padding: "20px",
Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  flexDirection: "column",
Â  Â  Â  Â  gap: "25px",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  {errorMessage && (
Â  Â  Â  Â  <MessageBox message={errorMessage} onClose={() => setErrorMessage(null)} />
Â  Â  Â  )}
Â  Â  Â  {showSuccessBanner && <SuccessToast message={successMessage} />}

Â  Â  Â  <Navbar />

Â  Â  Â  <h1 style={{ color: "#111827", fontSize: "2rem", fontWeight: 700 }}>
Â  Â  Â  Â  Financial Dashboard
Â  Â  Â  </h1>

Â  Â  Â  {/* Cards Section */}
Â  Â  Â  <div
Â  Â  Â  Â  className="cards-section"
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  gap: "20px",
Â  Â  Â  Â  Â  flexWrap: "wrap",
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <Card
Â  Â  Â  Â  Â  title="Total Balance"
Â  Â  Â  Â  Â  balance={mockData.totalBalance}
Â  Â  Â  Â  Â  fcBalance={mockData.fcBalance}
Â  Â  Â  Â  Â  color="blue"
Â  Â  Â  Â  />
Â  Â  Â  Â  <Card
Â  Â  Â  Â  Â  title="Total Income"
Â  Â  Â  Â  Â  balance={mockData.totalIncome}
Â  Â  Â  Â  Â  fcBalance="2,000.00 FC"
Â  Â  Â  Â  Â  color="green"
Â  Â  Â  Â  />
Â  Â  Â  Â  <Card
Â  Â  Â  Â  Â  title="Total Expenses"
Â  Â  Â  Â  Â  balance={mockData.totalExpenses}
Â  Â  Â  Â  Â  fcBalance="800.00 FC"
Â  Â  Â  Â  Â  color="red"
Â  Â  Â  Â  />
Â  Â  Â  </div>

Â  Â  Â  {/* Main Content Area */}
Â  Â  Â  <div
Â  Â  Â  Â  className="main-content"
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  gap: "25px",
Â  Â  Â  Â  Â  flexWrap: "wrap",
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  {/* Chart */}
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className="chart-container"
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  flex: "2",
Â  Â  Â  Â  Â  Â  minWidth: "400px",
Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  borderRadius: "16px",
Â  Â  Â  Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  Â  Â  Â  Â  padding: "10px",
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Plot
Â  Â  Â  Â  Â  Â  data={mockData.chartData}
Â  Â  Â  Â  Â  Â  layout={mockData.chartLayout}
Â  Â  Â  Â  Â  Â  style={{ width: "100%", height: "400px" }}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Transaction History and Add Button */}
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className="history-container"
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  flex: "1",
Â  Â  Â  Â  Â  Â  minWidth: "300px",
Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  borderRadius: "16px",
Â  Â  Â  Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  Â  Â  Â  Â  padding: "20px",
Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  flexDirection: "column",
Â  Â  Â  Â  Â  Â  gap: "15px",
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  Â  justifyContent: "space-between",
Â  Â  Â  Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <h2
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  color: "#111827",
Â  Â  Â  Â  Â  Â  Â  Â  fontSize: "1.5rem",
Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Recent Transactions
Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowModal(true)}
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  padding: "8px 15px",
Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#10b981",
Â  Â  Â  Â  Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  + Add Transaction
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Transaction List */}
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className="transaction-list"
Â  Â  Â  Â  Â  Â  style={{ overflowY: "auto", maxHeight: "300px" }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {mockData.mockTransactions.map((tx) => (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={tx.id}
Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  Â  Â  Â  justifyContent: "space-between",
Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: "10px 0",
Â  Â  Â  Â  Â  Â  Â  Â  Â  borderBottom: "1px solid #e5e7eb",
Â  Â  Â  Â  Â  Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: "#1f2937",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.motif}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div style={{ fontSize: "0.85rem", color: "#6b7280" }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.date} | {tx.channel}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  tx.channel === "Sorties" ? "#ef4444" : "#10b981",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  display: 'flex',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  flexDirection: 'column',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alignItems: 'flex-end',
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.channel === "Sorties" ? "-" : "+"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.amount} {tx.currency}
Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.status === "Pending" && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span style={{ fontSize: '0.7rem', color: '#f59e0b', fontWeight: 500 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (Pending)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Modal for adding transaction */}
Â  Â  Â  {showModal && (
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className="modal-overlay"
Â  Â  Â  Â  Â  onClick={() => setShowModal(false)}
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  Â  Â  top: 0,
Â  Â  Â  Â  Â  Â  left: 0,
Â  Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  Â  height: "100%",
Â  Â  Â  Â  Â  Â  backgroundColor: "rgba(0,0,0,0.5)",
Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  justifyContent: "center",
Â  Â  Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  Â  Â  zIndex: 9000,
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className="modal-content"
Â  Â  Â  Â  Â  Â  onClick={(e) => e.stopPropagation()}
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "12px",
Â  Â  Â  Â  Â  Â  Â  padding: "30px",
Â  Â  Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  Â  Â  maxWidth: "500px",
Â  Â  Â  Â  Â  Â  Â  boxShadow: "0 8px 30px rgba(0,0,0,0.25)",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <h2
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  marginBottom: "20px",
Â  Â  Â  Â  Â  Â  Â  Â  color: "#111827",
Â  Â  Â  Â  Â  Â  Â  Â  borderBottom: "1px solid #e5e7eb",
Â  Â  Â  Â  Â  Â  Â  Â  paddingBottom: "10px",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Add New Transaction
Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  <form
Â  Â  Â  Â  Â  Â  Â  onSubmit={handleShowConfirm}
Â  Â  Â  Â  Â  Â  Â  style={{ display: "flex", flexDirection: "column", gap: "15px" }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {/* Date */}
Â  Â  Â  Â  Â  Â  Â  <label style={{ fontWeight: 500, color: "#374151" }}>Date</label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  name="date"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.date}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: "10px", border: "1px solid #d1d5db", borderRadius: "8px" }}
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  {/* Amount */}
Â  Â  Â  Â  Â  Â  Â  <label style={{ fontWeight: 500, color: "#374151" }}>Amount</label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  name="amount"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., 500.00"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.amount}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  min="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: "10px", border: "1px solid #d1d5db", borderRadius: "8px" }}
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  {/* Currency */}
Â  Â  Â  Â  Â  Â  Â  <label style={{ fontWeight: 500, color: "#374151" }}>Currency</label>
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  name="currency"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.currency}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: "10px", border: "1px solid #d1d5db", borderRadius: "8px" }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="USD">USD</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="MAD">MAD</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="FC">FC</option>
Â  Â  Â  Â  Â  Â  Â  </select>

Â  Â  Â  Â  Â  Â  Â  {/* Channel */}
Â  Â  Â  Â  Â  Â  Â  <label style={{ fontWeight: 500, color: "#374151" }}>Channel (Type)</label>
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  name="channel"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.channel}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: "10px", border: "1px solid #d1d5db", borderRadius: "8px" }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="EntrÃ©es">EntrÃ©es (Income)</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Sorties">Sorties (Expense - Requires Approval)</option>
Â  Â  Â  Â  Â  Â  Â  </select>

Â  Â  Â  Â  Â  Â  Â  {/* Motif */}
Â  Â  Â  Â  Â  Â  Â  <label style={{ fontWeight: 500, color: "#374151" }}>Motif (Description)</label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  name="motif"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., Office Rent, Tithes"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.motif}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: "10px", border: "1px solid #d1d5db", borderRadius: "8px" }}
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  {/* File */}
Â  Â  Â  Â  Â  Â  Â  <label style={{ fontWeight: 500, color: "#374151" }}>
Â  Â  Â  Â  Â  Â  Â  Â  Supporting File (Receipt/Invoice)
Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  Â  Â  name="file"
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFileChange}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: "10px", border: "1px solid #d1d5db", borderRadius: "8px" }}
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  marginTop: "10px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: "12px 20px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: loading ? "#9ca3af" : "#10b981",
Â  Â  Â  Â  Â  Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  Â  Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  Â  Â  Â  cursor: loading ? "not-allowed" : "pointer",
Â  Â  Â  Â  Â  Â  Â  Â  Â  transition: "background-color 0.2s",
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {loading ? "Processing..." : "Submit Transaction"}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {/* Confirmation Modal */}
Â  Â  Â  <ConfirmationModal
Â  Â  Â  Â  isOpen={showConfirmModal}
Â  Â  Â  Â  message={`Are you sure you want to add this transaction? ${
Â  Â  Â  Â  Â  newTransaction.channel.toLowerCase() === "sorties"
Â  Â  Â  Â  Â  Â  ? " (If 'Sorties', it will require Admin approval first.)"
Â  Â  Â  Â  Â  Â  : ""
Â  Â  Â  Â  }`}
Â  Â  Â  Â  onConfirm={handleAddTransaction}
Â  Â  Â  Â  onCancel={() => setShowConfirm(false)}
Â  Â  Â  />
Â  Â  </div>
Â  );
}