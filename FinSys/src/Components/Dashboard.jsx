import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Plot from "react-plotly.js";

const API_BASE_URL = "https://finsys.onrender.com/api";

// --- START: Internal Components (Unchanged) ---

const SuccessToast = ({ message }) => {
Â  return (
Â  Â  <div
Â  Â  Â  className="success-toast"
Â  Â  Â  style={{
Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  bottom: "20px",
Â  Â  Â  Â  left: "50%",
Â  Â  Â  Â  transform: "translateX(-50%)",
Â  Â  Â  Â  backgroundColor: "#10b981", // Emerald green
Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  padding: "15px 30px",
Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
Â  Â  Â  Â  zIndex: 10001,
Â  Â  Â  Â  animation: "slideInUp 0.3s ease-out, fadeOut 0.5s ease-in 4.5s forwards",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <span>{message}</span>
Â  Â  Â  <style>{`
Â  Â  Â  Â  @keyframes slideInUp {
Â  Â  Â  Â  Â  from {
Â  Â  Â  Â  Â  Â  transform: translate(-50%, 100%);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  to {
Â  Â  Â  Â  Â  Â  transform: translate(-50%, 0);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  @keyframes fadeOut {
Â  Â  Â  Â  Â  to {
Â  Â  Â  Â  Â  Â  opacity: 0;
Â  Â  Â  Â  Â  Â  visibility: hidden;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  `}</style>
Â  Â  </div>
Â  );
};


const ConfirmationModal = ({ isOpen, message, onConfirm, onCancel }) => {
Â  if (!isOpen) return null;

Â  return (
Â  Â  <div
Â  Â  Â  className="confirmation-modal-overlay"
Â  Â  Â  onClick={onCancel}
Â  Â  Â  style={{
Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  top: 0,
Â  Â  Â  Â  left: 0,
Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  height: "100%",
Â  Â  Â  Â  backgroundColor: "rgba(0,0,0,0.6)",
Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  justifyContent: "center",
Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  zIndex: 10000,
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <div
Â  Â  Â  Â  className="confirmation-modal-content"
Â  Â  Â  Â  onClick={(e) => e.stopPropagation()}
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  borderRadius: "12px",
Â  Â  Â  Â  Â  padding: "25px 30px",
Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  maxWidth: "400px",
Â  Â  Â  Â  Â  boxShadow: "0 8px 30px rgba(0,0,0,0.25)",
Â  Â  Â  Â  Â  textAlign: "center",
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <h3 style={{ fontSize: "1.2rem", color: "#111827", marginBottom: "15px" }}>
Â  Â  Â  Â  Â  Confirm Transaction
Â  Â  Â  Â  </h3>
Â  Â  Â  Â  <p style={{ marginBottom: "25px", color: "#4b5563" }}>
Â  Â  Â  Â  Â  {message}
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <div style={{ display: "flex", justifyContent: "center", gap: "15px" }}>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onCancel}
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  padding: "10px 20px",
Â  Â  Â  Â  Â  Â  Â  border: "1px solid #d1d5db",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  transition: "all 0.2s",
Â  Â  Â  Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = "#f3f4f6")}
Â  Â  Â  Â  Â  Â  onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = "#fff")}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onConfirm}
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  padding: "10px 20px",
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#10b981",
Â  Â  Â  Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  transition: "all 0.2s",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = "#059669")}
Â  Â  Â  Â  Â  Â  onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = "#10b981")}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Confirm Add
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};


const MessageBox = ({ message, onClose }) => (
Â  <div
Â  Â  className="message-box"
Â  Â  style={{
Â  Â  Â  position: "fixed",
Â  Â  Â  top: "20px",
Â  Â  Â  right: "20px",
Â  Â  Â  backgroundColor: "#fee2e2",
Â  Â  Â  color: "#b91c1c",
Â  Â  Â  padding: "12px 20px",
Â  Â  Â  borderRadius: "10px",
Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.1)",
Â  Â  Â  zIndex: 9999,
Â  Â  Â  display: "flex",
Â  Â  Â  justifyContent: "space-between",
Â  Â  Â  alignItems: "center",
Â  Â  Â  minWidth: "250px",
Â  Â  }}
Â  >
Â  Â  <span>{message}</span>
Â  Â  <button
Â  Â  Â  onClick={onClose}
Â  Â  Â  style={{
Â  Â  Â  Â  marginLeft: "15px",
Â  Â  Â  Â  background: "none",
Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  fontSize: "1.2rem",
Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  color: "#b91c1c",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  &times;
Â  Â  </button>
Â  </div>
);

const Card = ({ title, balance, fcBalance, color }) => (
Â  <div
Â  Â  className={`card ${color}`}
Â  Â  style={{
Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  padding: "20px",
Â  Â  Â  borderRadius: "16px",
Â  Â  Â  flex: 1,
Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  Â  display: "flex",
Â  Â  Â  flexDirection: "column",
Â  Â  Â  gap: "10px",
Â  Â  Â  minWidth: "200px",
Â  Â  Â 
Â  Â  }}
Â  >
Â  Â  <h3 style={{ color: "#374151", fontWeight: 600 }}>{title}</h3>
Â  Â  <p className="balance" style={{ fontSize: "1.25rem", fontWeight: 600 }}>
Â  Â  Â  {balance}
Â  Â  </p>
Â  Â  <p className="fc-balance" style={{ color: "#6b7280" }}>
Â  Â  Â  {fcBalance}
Â  Â  </p>
Â  </div>
);

const Navbar = () => {
Â  const navigate = useNavigate();
Â  const [userEmail, setUserEmail] = useState("User");

Â  useEffect(() => {
Â  Â  try {
Â  Â  Â  const userString = localStorage.getItem("user");
Â  Â  Â  if (userString) {
Â  Â  Â  Â  const user = JSON.parse(userString);
Â  Â  Â  Â  setUserEmail(user.email || "User");
Â  Â  Â  }
Â  Â  } catch (e) {
Â  Â  Â  console.error("Failed to parse user data for navbar.", e);
Â  Â  }
Â  }, []);

Â  const handleLogout = () => {
Â  Â  localStorage.clear();
Â  Â  window.location.href = "/login";
Â  };

Â  return (
Â  Â <nav
Â  style={{
Â  Â  position: "relative",
Â  Â  top: "0",
Â  Â  right: "0",
Â  Â  display: "flex",
Â  Â  alignItems: "center",
Â  Â  justifyContent: "flex-end",
Â  Â  padding: "0.75rem 1rem",
Â  Â  backgroundColor: "#f5f5f7",
Â  Â  color: "#0f0f0fff",
Â  Â  boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
Â  Â  borderBottomLeftRadius: "0.75rem",
Â  Â  zIndex: 1000,
Â  }}
>
Â  <div style={{ display: "flex", alignItems: "center", gap: "1rem" }}>
Â  Â  <span
Â  Â  Â  style={{
Â  Â  Â  Â  fontSize: "0.875rem",
Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  color: "#141414ff",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <strong>{userEmail}</strong>
Â  Â  Â  </span>

Â  Â  {/* Profile Circle */}
Â  Â  <div
Â  Â  Â  style={{
Â  Â  Â  Â  width: "40px",
Â  Â  Â  Â  height: "40px",
Â  Â  Â  Â  borderRadius: "50%",
Â  Â  Â  Â  backgroundColor: "#3b82f6",
Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  justifyContent: "center",
Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  fontSize: "1rem",
Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  }}
Â  Â  Â  title="Profile"
Â  Â  Â Â 
Â  Â  >
Â  Â  Â  {userEmail?.charAt(0).toUpperCase() || "U"}
Â  Â  </div>
Â  </div>
</nav>


Â  );
};
// --- END: Internal Components (Unchanged) ---


export default function Dashboard() {
Â  const navigate = useNavigate();

Â  const [tableData, setTableData] = useState([]);
Â  const [showModal, setShowModal] = useState(false);
Â  const [showConfirmModal, setShowConfirm] = useState(false);
Â  const [showSuccessBanner, setShowSuccessBanner] = useState(false);
Â  const [errorMessage, setErrorMessage] = useState(null);
Â  const [loading, setLoading] = useState(true);

Â  const [currentUserId, setCurrentUserId] = useState(null);
Â  // ðŸ‘‡ NEW STATE: To hold the JWT Token
Â  const [authToken, setAuthToken] = useState(null); 

Â  const [newTransaction, setNewTransaction] = useState({
Â  Â  date: new Date().toISOString().slice(0, 10),
Â  Â  amount: "",
Â  Â  currency: "$",
Â  Â  channel: "EntrÃ©es",
Â  Â  motif: "",
Â  Â  file: null,
Â  Â  userID: "",
Â  });

Â  const [dollarsSum, setDollarsSum] = useState([0, 0]); // [Entrees, Sorties]
Â  const [fcSum, setFcSum] = useState([0, 0]); // [Entrees, Sorties]

Â  // --- Fetch transactions from backend ---
Â  const fetchTransactions = async (userId, token) => {
Â  Â  if (!userId || !token) {
Â  Â  Â  console.log("No UserID or Token available for fetching.");
Â  Â  Â  setLoading(false);
Â  Â  Â  return;
Â  Â  }
Â  Â Â 
Â  Â  try {
Â  Â  Â  // Pass the Authorization header for GET requests too
Â  Â  Â  const response = await axios.get(`${API_BASE_URL}/Transactions/user/${userId}`, {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  "Authorization": `Bearer ${token}`
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  Â Â 
Â  Â  Â  setTableData(response.data);
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error fetching transactions:", error);
Â  Â  Â  setErrorMessage(
Â  Â  Â  Â  error.response?.data?.message || "Failed to fetch transactions"
Â  Â  Â  );
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // Correct Authentication Check and User ID Retrieval
Â  useEffect(() => {
Â  Â  const userString = localStorage.getItem("user");
Â  Â  const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";

Â  Â  if (!userString || !isLoggedIn) {
Â  Â  Â  navigate("/login");
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  const user = JSON.parse(userString);
Â  Â  Â  const userId = user?.id;
Â  Â  Â  // ðŸ‘‡ IMPORTANT: Get the token from the user object
Â  Â  Â  const token = user?.token; 

Â  Â  Â  if (!userId || !token) {
Â  Â  Â  Â  localStorage.clear();
Â  Â  Â  Â  navigate("/login");
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  setCurrentUserId(userId);
Â  Â  Â  setAuthToken(token); // ðŸ‘‡ Store the token
Â  Â  Â  setNewTransaction((prev) => ({ ...prev, userID: userId }));

Â  Â  Â  fetchTransactions(userId, token); // ðŸ‘‡ Pass the token to fetch
Â  Â  } catch (e) {
Â  Â  Â  console.error("Error parsing user data:", e);
Â  Â  Â  setErrorMessage("Local user data corrupted. Please log in again.");
Â  Â  Â  localStorage.clear();
Â  Â  Â  navigate("/login");
Â  Â  }
Â  }, [navigate]);

Â  // Update chart sums whenever tableData changes
Â useEffect(() => {
Â  const totalDollarsEntrees = tableData
Â  Â  .filter((tx) => tx.channel === "EntrÃ©es" && tx.currency === "$")
Â  Â  .reduce((sum, tx) => sum + (Number(tx.amount) || 0), 0);

Â  const totalDollarsSorties = tableData
Â  Â  .filter((tx) => tx.channel === "Sorties" && tx.currency === "$")
Â  Â  .reduce((sum, tx) => sum + (Number(tx.amount) || 0), 0);

Â  const totalFcEntrees = tableData
Â  Â  .filter((tx) => tx.channel === "EntrÃ©es" && tx.currency === "FC")
Â  Â  .reduce((sum, tx) => sum + (Number(tx.amount) || 0), 0);

Â  const totalFcSorties = tableData
Â  Â  .filter((tx) => tx.channel === "Sorties" && tx.currency === "FC")
Â  Â  .reduce((sum, tx) => sum + (Number(tx.amount) || 0), 0);

Â  setDollarsSum([totalDollarsEntrees, totalDollarsSorties]);
Â  setFcSum([totalFcEntrees, totalFcSorties]);
}, [tableData]);


Â  const handleChange = (e) => {
Â  Â  const { name, value, files } = e.target;
Â  Â  setNewTransaction((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  [name]: files ? files[0] : value,
Â  Â  }));
Â  };

const handleConfirmSubmit = async () => {
Â  setShowConfirm(false);
  
Â  if (!authToken) {
Â  Â  setErrorMessage("Authorization token is missing. Please log in again.");
Â  Â  return;
Â  }

Â  const formData = new FormData();
Â  formData.append("Date", newTransaction.date);
Â  formData.append("Amount", newTransaction.amount);
Â  formData.append("Currency", newTransaction.currency);
Â  formData.append("Channel", newTransaction.channel);
Â  formData.append("Motif", newTransaction.motif || "N/A");
Â  formData.append("User_Id", currentUserId);
Â  if (newTransaction.file) {
Â  Â  formData.append("File", newTransaction.file);
Â  }
  
  // ðŸ‘‡ FIX: Include the Authorization header with the JWT token
Â  try {
Â  Â  const response = await axios.post(`${API_BASE_URL}/Transactions`, formData, {
Â  Â  Â  headers: {
Â  Â  Â  Â  "Content-Type": "multipart/form-data",
Â  Â  Â  Â  "Authorization": `Bearer ${authToken}`, // <--- THIS IS THE FIX
Â  Â  Â  },
Â  Â  });

Â  Â  console.log("Transaction added:", response.data);

Â  Â  if (currentUserId && authToken) {
Â  Â  Â  fetchTransactions(currentUserId, authToken); // Re-fetch with token
Â  Â  }

Â  Â  // Show success banner
Â  Â  setShowSuccessBanner(true);
Â  Â  setTimeout(() => {
Â  Â  Â  Â  setShowSuccessBanner(false);
Â  Â  }, 5000);

Â  Â  // Reset form and close the main modal
Â  Â  setNewTransaction({
Â  Â  Â  date: new Date().toISOString().slice(0, 10),
Â  Â  Â  amount: "",
Â  Â  Â  currency: "$",
Â  Â  Â  channel: "EntrÃ©es",
Â  Â  Â  motif: "",
Â  Â  Â  file: null,
Â  Â  Â  userID: currentUserId,
Â  Â  });
Â  Â  setShowModal(false);
Â  } catch (error) {
Â  Â  console.error("Error adding transaction:", error.response?.data || error.message);
Â  Â  // Enhanced error message for 401
Â  Â  if (error.response && error.response.status === 401) {
Â  Â  Â  setErrorMessage("Failed to add transaction: Unauthorized. Your session may have expired.");
Â  Â  } else {
Â  Â  Â  setErrorMessage(error.response?.data?.message || "Failed to add transaction. Check console for details.");
Â  Â  }
Â  }
};

const handleSubmit = (e) => {
Â  e.preventDefault();
Â  
Â  if (!newTransaction.amount || newTransaction.amount <= 0) {
Â  Â  setErrorMessage("Please enter a valid amount.");
Â  Â  return;
Â  }
Â  
Â  setShowConfirm(true);
};


Â  // --- Card balances & Calculations ---
Â  const entreesDollars = dollarsSum[0];
Â  const sortiesDollars = dollarsSum[1];
Â  const entreesFC = fcSum[0];
Â  const sortiesFC = fcSum[1];
Â 
Â  // Calculate Remaining Balances
Â  const remainingDollars = (entreesDollars - sortiesDollars).toFixed(2);
Â  const remainingFC = (entreesFC - sortiesFC).toFixed(2);

Â  // Display balances for the existing cards
Â  const entreesBalance = `$${entreesDollars.toFixed(2)}`;
Â  const sortiesBalance = `$${sortiesDollars.toFixed(2)}`;
Â  const entreesFCDisplay = `FC ${entreesFC.toFixed(2)}`;
Â  const sortiesFCDisplay = `FC ${sortiesFC.toFixed(2)}`;

Â  // Determine the transaction summary for the confirmation message
Â  const confirmationMessage = `Are you sure you want to add the transaction of ${newTransaction.currency} ${Number(newTransaction.amount).toFixed(2)} as an ${newTransaction.channel.toLowerCase()}? This action is permanent.`;


Â  return (
Â  Â  <div
Â  Â  Â  className="dashboard"
Â  Â  Â  style={{
Â  Â  Â  Â  padding: "8px",
Â  Â  Â  Â  fontFamily: "'Inter', sans-serif",
Â  Â  Â  Â  backgroundColor: "#f9fafb",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <Navbar />
Â  Â  Â  {errorMessage && (
Â  Â  Â  Â  <MessageBox message={errorMessage} onClose={() => setErrorMessage(null)} />
Â  Â  Â  )}

Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â <div style={{ padding: '40px', textAlign: 'center', fontSize: '1.2rem', color: '#6b7280' }}>
Â  Â  Â  Â  Â  Â  Loading financial data...
Â  Â  Â  Â  Â </div>
Â  Â  Â  ) : (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  {/* Transactions Cards Section */}
Â  Â  Â  Â  Â <div className="transactions-section" style={{ marginTop: "0px" }}>
  <div
    className="transactions-header"
    style={{
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      marginBottom: "2px",
    }}
  >
    <h2 style={{ fontSize: "1.5rem", fontWeight: 600, color: "#111827" }}>
      Transactions
    </h2>
    <button
      className="add-btn"
      onClick={() => setShowModal(true)}
      style={{
        backgroundColor: "#4f46e5",
        color: "#fff",
        padding: "8px 16px",
        borderRadius: "8px",
        fontWeight: 500,
        cursor: "pointer",
        border: "none",
        transition: "all 0.2s",
      }}
      onMouseEnter={(e) =>
        (e.currentTarget.style.backgroundColor = "#4338ca")
      }
      onMouseLeave={(e) =>
        (e.currentTarget.style.backgroundColor = "#4f46e5")
      }
    >
      + Add
    </button>
  </div>

  <div
    className="transactions-cards-wrapper"
    style={{
      display: "flex",
      gap: "16px",
      minWidth: "100%",
      width: "100%",
      flexWrap: "nowrap",
      overflowX: "auto",
      paddingBottom: "0px",
      fontFamily: "'JetBrains Mono', monospace", // âœ… JetBrains-like font
    }}
  >
    <Card
      style={{
        minWidth: "300px", // âœ… Increased width
        flex: "0 0 auto",
        fontFamily: "'JetBrains Mono', monospace",
      }}
      title="ENTRÃ‰ES"
      balance={entreesBalance}
      fcBalance={entreesFCDisplay}
      color="card-entrees"
    />
    <Card
      style={{
        minWidth: "300px", // âœ… Increased width
        flex: "0 0 auto",
        fontFamily: "'JetBrains Mono', monospace",
      }}
      title="SORTIES"
      balance={sortiesBalance}
      fcBalance={sortiesFCDisplay}
      color="card-sorties"
    />
  </div>
</div>
 
Â  Â  Â  Â  Â  {/* ðŸ‘‡ NEW: Remaining Balance Display */}
 <h2 style={{ fontSize: "1.5rem", fontWeight: 600, color: "#111827" }}>
Â  Â  Â  Â  Â  Â  Â  Â  Ecarts
Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className="remaining-balance-div"
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  marginTop: "20px",
Â  Â  Â  Â  Â  Â  Â  padding: "20px",
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#22c55e", // Green background for remaining balance
Â  Â  Â  Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "16px",
Â  Â  Â  Â  Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  Â  Â  Â  Â  Â  textAlign: "center",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â 
Â  Â  Â  Â  Â  Â  <div style={{ display: "flex", justifyContent: "space-around", gap: "20px" }}>
Â  Â  Â  Â  Â  Â  Â  <div style={{ flex: 1, borderRight: "1px solid rgba(255, 255, 255, 0.5)", paddingRight: "10px" }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ fontSize: "1.1rem", fontWeight: 500, opacity: 0.9 }}>$</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ fontSize: "1rem", fontWeight: 600 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {remainingDollars}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div style={{ flex: 1, paddingLeft: "10px" }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ fontSize: "1.1rem", fontWeight: 500, opacity: 0.9 }}>FC</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ fontSize: "1rem", fontWeight: 600 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {remainingFC}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  {/* ðŸ‘† END: Remaining Balance Display */}

Â  Â  Â  Â  Â  {/* Overview Charts Header */}
Â  Â  Â  Â  Â  <div className="transactions-header" style={{ marginTop: "10px" }}>
Â  Â  Â  Â  Â  Â  <h2 style={{ fontSize: "1.5rem", fontWeight: 600, color: "#111827" }}>
Â  Â  Â  Â  Â  Â  Â  Overview
Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  {/* ... Rest of the charts and table (unchanged) ... */}
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â <div
Â  className="chart-carousel"
Â  style={{
Â  Â  display: "flex",
Â  Â  gap: "20px",
Â  Â  flexWrap: "nowrap",
Â  Â  overflowX: "auto",
Â  Â  marginTop: "15px",
Â  Â  paddingBottom: "10px",
Â  }}
>
Â  {/* Dollars Chart */}
Â  <div
Â  Â  className="card chart-card"
Â  Â  style={{
Â  Â  Â  flex: "0 0 auto",
Â  Â  Â  minWidth: "350px",
Â  Â  Â  padding: "10px",
Â  Â  Â  borderRadius: "16px",
Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  }}
Â  >
Â  Â  <h3 style={{ color: "#374151", fontWeight: 600 }}>Dollars Summary</h3>
Â  Â  <Plot
Â  Â  Â  data={[
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  x: ["EntrÃ©es", "Sorties"],
Â  Â  Â  Â  Â  y: dollarsSum,
Â  Â  Â  Â  Â  type: "bar",
Â  Â  Â  Â  Â  marker: { color: "#4f46e5" },
Â  Â  Â  Â  },
Â  Â  Â  ]}
Â  Â  Â  layout={{
Â  Â  Â  Â  autosize: true,
Â  Â  Â  Â  margin: { t: 30, b: 50, l: 40, r: 20 },
Â  Â  Â  Â  xaxis: { title: "Channel", automargin: true },
Â  Â  Â  Â  yaxis: { title: "Amount ($)", automargin: true },
Â  Â  Â  Â  showlegend: false,
Â  Â  Â  Â  transition: { duration: 800, easing: "bounce" },
Â  Â  Â  }}
Â  Â  Â  style={{ width: "100%", height: "300px" }}
Â  Â  Â  useResizeHandler
Â  Â  Â  config={{ displayModeBar: false }}
Â  Â  />
Â  </div>

Â  {/* FC Chart */}
Â  <div
Â  Â  className="card chart-card"
Â  Â  style={{
Â  Â  Â  flex: "0 0 auto",
Â  Â  Â minWidth: "350px",
Â  Â  Â  padding: "10px",
Â  Â  Â  borderRadius: "16px",
Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  }}
Â  >
Â  Â  <h3 style={{ color: "#374151", fontWeight: 600 }}>FC Summary</h3>
Â  Â  <Plot
Â  Â  Â  data={[
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  x: ["EntrÃ©es", "Sorties"],
Â  Â  Â  Â  Â  y: fcSum,
Â  Â  Â  Â  Â  type: "bar",
Â  Â  Â  Â  Â  marker: { color: "#f59e0b" },
Â  Â  Â  Â  },
Â  Â  Â  ]}
Â  Â  Â  layout={{
Â  Â  Â  Â  autosize: true,
Â  Â  Â  Â  margin: { t: 30, b: 50, l: 40, r: 20 },
Â  Â  Â  Â  xaxis: { title: "Channel", automargin: true },
Â  Â  Â  Â  yaxis: { title: "Amount (FC)", automargin: true },
Â  Â  Â  Â  showlegend: false,
Â  Â  Â  Â  transition: { duration: 800, easing: "bounce" },
Â  Â  Â  }}
Â  Â  Â  style={{ width: "100%", height: "300px" }}
Â  Â  Â  useResizeHandler
Â  Â  Â  config={{ displayModeBar: false }}
Â  Â  />
Â  </div>
</div>


Â  Â  Â  Â  Â  {/* Transaction Table */}
Â  Â  Â  Â  Â  <div style={{ marginTop: "20px" }}>
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  Â  Â  justifyContent: "space-between",
Â  Â  Â  Â  Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  Â  Â  Â  Â  flexWrap: "wrap",
Â  Â  Â  Â  Â  Â  Â  Â  gap: "15px",
Â  Â  Â  Â  Â  Â  Â  Â  marginBottom: "15px",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <h2 style={{ fontSize: "1.6rem", fontWeight: 600, color: "#111827" }}>
Â  Â  Â  Â  Â  Â  Â  Â  Transaction Table
Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â 
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  overflowX: "auto",
Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: "5px",
Â  Â  Â  Â  Â  Â  Â  Â  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <table
Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  Â  Â  Â  Â  borderCollapse: "collapse",
Â  Â  Â  Â  Â  Â  Â  Â  Â  minWidth: "700px",
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <thead
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  position: "sticky",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  top: 0,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#f9fafb",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  zIndex: 10,
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {[
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "No",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Date",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Dollars",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "FC",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Motif",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Channel",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "File",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ].map((header) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={header}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: "12px 15px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  textAlign: "left",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: "#fff",
backgroundColor: "#111212ff",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderBottom: "1px solid #e5e7eb",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {header}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {tableData.map((tx, i) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={tx.id || i}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderBottom: "1px solid #f3f4f6",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  transition: "background-color 0.2s",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseEnter={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (e.currentTarget.style.backgroundColor = "#f3f4f6")
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseLeave={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (e.currentTarget.style.backgroundColor = "#fff")
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style={{ padding: "10px 15px" }}>{i + 1}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style={{ padding: "10px 15px" }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.date ? new Date(tx.date).toLocaleDateString('en-GB') : 'N/A'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style={{ padding: "10px 15px" }}>
Â  {tx.currency === "$" ? (Number(tx.amount) || 0).toFixed(2) : "0.00"}
</td>
<td style={{ padding: "10px 15px" }}>
Â  {tx.currency === "FC" ? (Number(tx.amount) || 0).toFixed(2) : "0.00"}
</td>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style={{ padding: "10px 15px" }}>{tx.motif}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: "10px 15px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: tx.channel === "EntrÃ©es" ? "#16a34a" : "#dc2626",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {tx.channel}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  {tx.file ? (
Â  Â  <a href={tx.file} target="_blank" rel="noopener noreferrer">
Â  Â  Â  View File
Â  Â  </a>
Â  ) : "N/A"}
</td>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  Â  )}

Â  Â  Â  {/* Main Add Transaction Modal */}
Â  Â  Â  {showModal && (
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className="modal-overlay"
Â  Â  Â  Â  Â  onClick={() => setShowModal(false)}
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  Â  Â  top: 0,
Â  Â  Â  Â  Â  Â  left: 0,
Â  Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  Â  height: "100%",
Â  Â  Â  Â  Â  Â  backgroundColor: "rgba(0,0,0,0.5)",
Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  justifyContent: "center",
Â  Â  Â  Â  Â  Â  alignItems: "center",
Â  Â  Â  Â  Â  Â  zIndex: 9999,
Â  Â  Â  Â  Â  Â  padding: "15px",
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className="modal-content"
Â  Â  Â  Â  Â  Â  onClick={(e) => e.stopPropagation()}
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  Â  borderRadius: "12px",
Â  Â  Â  Â  Â  Â  Â  padding: "25px 30px",
Â  Â  Â  Â  Â  Â  Â  width: "100%",
Â  Â  Â  Â  Â  Â  Â  maxWidth: "500px",
Â  Â  Â  Â  Â  Â  Â  boxShadow: "0 8px 30px rgba(0,0,0,0.15)",
Â  Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  Â  flexDirection: "column",
Â  Â  Â  Â  Â  Â  Â  gap: "15px",
Â  Â  Â  Â  Â  Â  Â  animation: "fadeIn 0.3s ease-out",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <h3
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  fontSize: "1.5rem",
Â  Â  Â  Â  Â  Â  Â  Â  marginBottom: "10px",
Â  Â  Â  Â  Â  Â  Â  Â  color: "#111827",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Add Transaction
Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  <form
Â  Â  Â  Â  Â  Â  Â  onSubmit={handleSubmit}
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  Â  Â  flexDirection: "column",
Â  Â  Â  Â  Â  Â  Â  Â  gap: "15px",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  name="date"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.date}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: '10px', borderRadius: '6px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  name="amount"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Amount"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.amount}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: '10px', borderRadius: '6px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  name="currency"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.currency}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: '10px', borderRadius: '6px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="$">USD ($)</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="FC">FC</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  name="channel"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.channel}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: '10px', borderRadius: '6px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="EntrÃ©es">EntrÃ©es</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Sorties">Sorties</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  name="motif"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Motif (Description)"
Â  Â  Â  Â  Â  Â  Â  Â  value={newTransaction.motif}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  style={{ padding: '10px', borderRadius: '6px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input type="file" name="file" onChange={handleChange} style={{ padding: '10px', borderRadius: '6px', border: '1px solid #d1d5db' }} />

Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  Â  Â  Â  Â  justifyContent: "flex-end",
Â  Â  Â  Â  Â  Â  Â  Â  Â  gap: "10px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  marginTop: "10px",
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowModal(false)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: "10px 20px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  border: "1px solid #d1d5db",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#fff",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  transition: "all 0.2s",
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = "#f3f4f6")}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = "#fff")}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: "10px 20px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#4f46e5",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: "#fff",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 500,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  transition: "all 0.2s",
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = "#4338ca")}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = "#4f46e5")}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Add
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  Â  {/* Confirmation Modal Render */}
Â  Â  Â  <ConfirmationModal
Â  Â  Â  Â  isOpen={showConfirmModal}
Â  Â  Â  Â  message={confirmationMessage}
Â  Â  Â  Â  onConfirm={handleConfirmSubmit}
Â  Â  Â  Â  onCancel={() => setShowConfirm(false)}
Â  Â  Â  />

Â  Â  Â  {/* Success Banner Render */}
Â  Â  Â  {showSuccessBanner && <SuccessToast message="Transaction added successfully! ðŸŽ‰" />}
Â  Â  </div>
Â  );
}